pipeline {
    agent any 
    parameters {    
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/lourash-hub/EKS-terraform-cluster.git']]])            
            }
        }
        stage('Checking current dir') {
            steps {
                sh 'pwd; ls; printenv'
            }
        }
        stage('EKS terraform init & Plan') {
            steps {
                echo "Initializing and planning Terraform with ACTION=${params.ACTION}"
                dir('EKS/cluster') {
                    withCredentials([aws(credentialsId: 'AWS_CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            terraform init
                            terraform plan -var-file=eks-cluster-use2.tfvars
                        '''
                    }
                }
            }
        } 
        stage('EKS Terraform apply') {
            when {
                expression { 
                    echo "Checking if ACTION is apply: ${params.ACTION == 'apply'}"
                    return params.ACTION == 'apply'
                }
            }
            steps {
                echo "Applying Terraform with ACTION=${params.ACTION}"
                dir('EKS/cluster') {
                    withCredentials([aws(credentialsId: 'AWS_CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform apply -var-file=eks-cluster-use2.tfvars --auto-approve'
                    }
                }
            }
        }
        stage('EKS Terraform destroy') {
            when {
                expression { 
                    echo "Checking if ACTION is destroy: ${params.ACTION == 'destroy'}"
                    return params.ACTION == 'destroy'
                }
            }
            steps {
                echo "Destroying Terraform with ACTION=${params.ACTION}"
                dir('EKS/cluster') {
                    withCredentials([aws(credentialsId: 'AWS_CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform destroy -var-file=eks-cluster-use2.tfvars --auto-approve'
                    }
                }
            }
        }
    }
}
